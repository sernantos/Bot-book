import TelegramBot from "node-telegram-bot-api";
import { $bookService, $commonService } from "./services/index";
import * as path from "path";
import fs from "fs";

const TOKEN = "YOUR_TELEGRAM_BOT_TOKEN";
const bot = new TelegramBot(TOKEN, { polling: true });

const userSession = {}; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–∏–≥—É, –∏ —è —Å–æ–∑–¥–∞–º EPUB.");
});

bot.onText(/(https?:\/\/[^\s]+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const PAGE_URL = match[1];

    userSession[chatId] = { url: PAGE_URL }; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Å—ã–ª–∫—É

    bot.sendMessage(chatId, "üìñ –°–∫–æ–ª—å–∫–æ –≥–ª–∞–≤ —Å–∫–∞—á–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1-10` –∏–ª–∏ `5-20`).");
});

bot.onText(/(\d+)-(\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    if (!userSession[chatId]?.url) {
        return bot.sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–∏–≥—É!");
    }

    const start = parseInt(match[1]);
    const end = parseInt(match[2]);
    const PAGE_URL = userSession[chatId].url;
    let statusMessageId = null;

    bot.sendMessage(chatId, "üìö –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ...").then((sentMessage) => {
        statusMessageId = sentMessage.message_id;
    });

    try {
        await $commonService.delay(1000);
        const bookInfo = await $bookService.getBookInfo(PAGE_URL);
        const BOOK_NAME = PAGE_URL.split("/").pop();
        const OUTPUT_BOOK_PATH = `${path.resolve()}/books/${BOOK_NAME}.epub`;

        bot.editMessageText("üìñ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤...", { chat_id: chatId, message_id: statusMessageId });
        await $commonService.delay(1000);
        const chapters = await $bookService.getChapters(PAGE_URL);

        if (start < 1 || end > chapters.length || start > end) {
            return bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤.");
        }

        const selectedChapters = chapters.slice(start - 1, end);

        bot.editMessageText(`üì• –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤—ã: ${start}-${end}...`, { chat_id: chatId, message_id: statusMessageId });

        let loadedChapters = [];
        for (let i = 0; i < selectedChapters.length; i++) {
            try {
                const content = await $bookService.getChapterContent(selectedChapters[i].url);
                loadedChapters.push({ title: selectedChapters[i].title, data: content });

                if (i % 3 === 0 || i === selectedChapters.length - 1) {
                    bot.editMessageText(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${i + 1}/${selectedChapters.length}`, {
                        chat_id: chatId,
                        message_id: statusMessageId,
                    });
                }
            } catch (error) {
                bot.sendMessage(chatId, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã: ${selectedChapters[i].title}`);
            }
        }

        if (loadedChapters.length === 0) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤—ã.");
        }

        bot.editMessageText("üì¶ –ì–µ–Ω–µ—Ä–∏—Ä—É—é EPUB...", { chat_id: chatId, message_id: statusMessageId });

        const epubBookOptions = {
            ...bookInfo,
            content: loadedChapters,
            output: OUTPUT_BOOK_PATH,
            verbose: true,
        };

        await $bookService.generateEpubFromData(epubBookOptions);

        bot.editMessageText("‚úÖ –ö–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...", { chat_id: chatId, message_id: statusMessageId });

        bot.sendDocument(chatId, fs.createReadStream(OUTPUT_BOOK_PATH)).then(() => {
            fs.unlinkSync(OUTPUT_BOOK_PATH);
        });

    } catch (error) {
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏: " + error.message);
    }

    delete userSession[chatId]; // –ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
});
